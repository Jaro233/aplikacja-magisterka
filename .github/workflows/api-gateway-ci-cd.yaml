name: api-gateway CI/CD Pipeline

on:
  push:
    branches: [master]
    paths:
      - ./spring-petclinic-api-gateway/**
  pull_request:
    branches: [master]
    paths:
      - ./spring-petclinic-api-gateway/**

env:
  # Credentials for AWS
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  # spring-petclinic-api-gateway path and name
  APP_PATH: ./spring-petclinic-cloud-api-gateway
  APP_NAME: spring-petclinic-cloud-api-gateway
  APP_NAME_SHORT: api-gateway

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Java 11
        uses: actions/setup-java@v4
        with:
          distribution: "adopt" # See 'Supported distributions' for available options
          java-version: "11"
          cache: "maven"
          cache-dependency-path: "${{env.APP_PATH}}/pom.xml"

  integration_tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Java 11
        uses: actions/setup-java@v4
        with:
          distribution: "adopt" # See 'Supported distributions' for available options
          java-version: "11"
          cache: "maven"
          cache-dependency-path: "${{env.APP_PATH}}/pom.xml"

      - name: Go to service directory
        run: cd ${{env.APP_PATH}}

      - name: Run tests
        run: mvn test

  code_quality_and_security_scanning:
    runs-on: ubuntu-latest
    needs: integration_tests
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Java 11
        uses: actions/setup-java@v4
        with:
          distribution: "adopt" # See 'Supported distributions' for available options
          java-version: "11"
          cache: "maven"
          cache-dependency-path: "${{env.APP_PATH}}/pom.xml"

      - name: Run OWASP Dependency Check
        run: |
          # Download and unzip Dependency-Check
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip
          unzip dependency-check-9.0.9-release.zip

          # Run Dependency-Check
          ./dependency-check/bin/dependency-check.sh --project "${{env.APP_NAME}}" --scan "${{env.APP_PATH}}" --nvdApiKey "${{ secrets.NVD_API_KEY }}" --format "XML" --out "${{env.APP_PATH}}/reports"

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v2
        with:
          name: dependency-check-report
          path: ${{env.APP_PATH}}/reports/dependency-check-report.xml

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=${{env.APP_NAME}}
            -Dsonar.organization=jaro233
            -Dsonar.dependencyCheck.reportPath=${{env.APP_PATH}}/reports/dependency-check-report.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build_and_push:
    runs-on: ubuntu-latest
    needs: code_quality_and_security_scanning
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Java 11
        uses: actions/setup-java@v4
        with:
          distribution: "adopt" # See 'Supported distributions' for available options
          java-version: "11"
          cache: "maven"
          cache-dependency-path: "${{env.APP_PATH}}/pom.xml"

      - name: Go to service directory
        run: cd ${{env.APP_PATH}}

      - name: Build artifact
        run: mvn clean install -DskipTests

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ../docker/Dockerfile
          build-args: |
            - ARTIFACT_NAME=${{env.APP_NAME_SHORT}}
            - DOCKERIZE_VERSION=0.7.0
            - EXPOSED_PORT=8080
          tags: ${{ steps.login-ecr-public.outputs.registry }}/${{env.APP_NAME}}:1.${{ github.run_number }}
          push: true

  docker_image_scanning:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Scan the Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr-public.outputs.registry }}/${{env.APP_NAME}}:1.${{ github.run_number }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

  deployment:
    runs-on: ubuntu-latest
    needs: docker_image_scanning
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Set up Kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{secrets.CLUSTER_NAME}}

      - name: Upgrade Application with Helm
        run: |
          helm upgrade ${{ env.APP_NAME_SHORT }} ./kubernetes/helm/app/${{ env.APP_NAME_SHORT }} \
            --reuse-values \
            --set microservice.image.tag=1.${{ github.run_number }}

  zap-scan:
    runs-on: ubuntu-latest
    needs: deployment
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          target: "https://petclinic.devopshub.org"

  cypress-run:
    runs-on: ubuntu-latest
    needs: zap-scan
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Go to cypress directory
        run: cd cypress

      - name: Install Dependencies
        run: npm install

      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          wait-on-timeout: 10
          config: video=false
          browser: chrome
